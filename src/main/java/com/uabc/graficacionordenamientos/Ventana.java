package com.uabc.graficacionordenamientos;

import com.opencsv.CSVReader;
import com.opencsv.exceptions.CsvException;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.Paint;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Random;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import java.util.Arrays;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author JesusOmar Leal
 */
public class Ventana extends javax.swing.JFrame {

    private ImageIcon imagen;
    private Icon icono;
    private boolean arreglosGenerados = false;
    private int arreglo1[] = new int[100]; //100
    private int arreglo2[] = new int[500];
    private int arreglo3[] = new int[1000];
    private int arreglo4[] = new int[1500];
    private int arreglo5[] = new int[2000];
    private int arreglo6[] = new int[3000];
    private int arreglo7[] = new int[4000];
    private int arreglo8[] = new int[5000];
    private int arreglo9[] = new int[7000];
    private int arreglo10[] = new int[10000];



    public Ventana() {

        initComponents();
        this.setLocationRelativeTo(this);
        resetCSV();
        this.setBackground(Background, "C:\\Users\\omar-\\OneDrive\\Documentos\\NetBeansProjects\\GraficacionOrdenamientos\\src\\main\\java\\com\\uabc\\graficacionordenamientos\\assets\\fondo.jpg");
        //this.setBackground(Background, "/home/omarleal/NetBeansProjects/GraficacionOrdenamientos/src/main/java/com/uabc/graficacionordenamientos/assets/fondo.jpg");
    }

    private void setBackground(JLabel lbl, String url) {

        this.imagen = new ImageIcon(url);

        this.icono = new ImageIcon(this.imagen.getImage().getScaledInstance(lbl.getWidth(), lbl.getHeight(), Image.SCALE_DEFAULT));

        lbl.setIcon(this.icono);

        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        generarBoton = new javax.swing.JToggleButton();
        OrdenarBoton = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        caso1 = new javax.swing.JCheckBox();
        caso2 = new javax.swing.JCheckBox();
        caso3 = new javax.swing.JCheckBox();
        Titulo = new javax.swing.JLabel();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        generarBoton.setText("Generar Arreglos");
        generarBoton.setContentAreaFilled(false);
        generarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarBotonActionPerformed(evt);
            }
        });
        jPanel1.add(generarBoton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, 180, -1));

        OrdenarBoton.setText("Ordenar");
        OrdenarBoton.setContentAreaFilled(false);
        OrdenarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenarBotonActionPerformed(evt);
            }
        });
        jPanel1.add(OrdenarBoton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 220, 180, -1));

        jLabel1.setText("Mostrar Graficas");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        caso1.setText("Caso 1: Arreglos Desordenados");
        caso1.setContentAreaFilled(false);
        caso1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caso1ActionPerformed(evt);
            }
        });
        jPanel1.add(caso1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        caso2.setText("Caso 2: Arreglos Ordenados");
        caso2.setContentAreaFilled(false);
        caso2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caso2ActionPerformed(evt);
            }
        });
        jPanel1.add(caso2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        caso3.setText("Caso 3: Arreglos en forma Descendente");
        caso3.setContentAreaFilled(false);
        caso3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caso3ActionPerformed(evt);
            }
        });
        jPanel1.add(caso3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        Titulo.setIcon(new javax.swing.ImageIcon("C:\\Users\\omar-\\OneDrive\\Documentos\\NetBeansProjects\\GraficacionOrdenamientos\\src\\main\\java\\com\\uabc\\graficacionordenamientos\\assets\\titulo.png")); // NOI18N
        jPanel1.add(Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));
        jPanel1.add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 260));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarBotonActionPerformed

        rellenarAleatorio(arreglo1);
        rellenarAleatorio(arreglo2);
        rellenarAleatorio(arreglo3);
        rellenarAleatorio(arreglo4);
        rellenarAleatorio(arreglo5);
        rellenarAleatorio(arreglo6);
        rellenarAleatorio(arreglo7);
        rellenarAleatorio(arreglo8);
        rellenarAleatorio(arreglo9);
        rellenarAleatorio(arreglo10);

        this.arreglosGenerados = true;
        JOptionPane.showMessageDialog(this, "Arreglos Generados Con Exito", "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_generarBotonActionPerformed

    private void OrdenarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenarBotonActionPerformed
        if (arreglosGenerados) {

            resetCSV();

            casoUno(arreglo1, 1);
           // System.out.println("Arreglo ya ordenado");
           // mostrarArreglo(arreglo1);
            casoDos(arreglo1, 1);
            ordenarMayorMenor(arreglo1);
           // System.out.println("arreglo de mayor a menor");
           // mostrarArreglo(arreglo1);
            casoTres(arreglo1, 1);

            casoUno(arreglo2, 2);
            casoDos(arreglo2, 2);
            ordenarMayorMenor(arreglo2);
            casoTres(arreglo2, 2);

            casoUno(arreglo3, 3);
            casoDos(arreglo3, 3);
            ordenarMayorMenor(arreglo3);
            casoTres(arreglo3, 3);

            casoUno(arreglo4, 4);
            casoDos(arreglo4, 4);
            ordenarMayorMenor(arreglo4);
            casoTres(arreglo4, 4);

            casoUno(arreglo5, 5);
            casoDos(arreglo5, 5);
            ordenarMayorMenor(arreglo5);
            casoTres(arreglo5, 5);

            casoUno(arreglo6, 6);
            casoDos(arreglo6, 6);
            ordenarMayorMenor(arreglo6);
            casoTres(arreglo6, 6);

            casoUno(arreglo7, 7);
            casoDos(arreglo7, 7);
            ordenarMayorMenor(arreglo7);
            casoTres(arreglo7, 7);

            casoUno(arreglo8, 8);
            casoDos(arreglo8, 8);
            ordenarMayorMenor(arreglo8);
            casoTres(arreglo8, 8);

            casoUno(arreglo9, 9);
            casoDos(arreglo9, 9);
            ordenarMayorMenor(arreglo9);
            casoTres(arreglo9, 9);

            casoUno(arreglo10, 10);
            casoDos(arreglo10, 10);
            ordenarMayorMenor(arreglo10);
            casoTres(arreglo10, 10);

        } else {
            JOptionPane.showMessageDialog(this, "No Se Han Generado Los Arreglos", "Error", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_OrdenarBotonActionPerformed

    private void caso1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caso1ActionPerformed

        if (arreglosGenerados) {

            graficarArchivo("QuickSort(caso1).csv", "mergeSort(caso1).csv", "Sort(caso1).csv", "ParallelSort(caso1).csv", "Caso 1");
            caso1.setSelected(false);
        } else {

            JOptionPane.showMessageDialog(this, "No Se Han Generado Los Arreglos", "Error", JOptionPane.INFORMATION_MESSAGE);
            caso1.setSelected(false);
        }
    }//GEN-LAST:event_caso1ActionPerformed

    private void caso2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caso2ActionPerformed
        if (arreglosGenerados) {

            graficarArchivo("QuickSort(caso2).csv", "mergeSort(caso2).csv", "Sort(caso2).csv", "ParallelSort(caso2).csv", "Caso 2");
            caso2.setSelected(false);
        } else {
            JOptionPane.showMessageDialog(this, "No Se Han Generado Los Arreglos", "Error", JOptionPane.INFORMATION_MESSAGE);
            caso2.setSelected(false);
        }
    }//GEN-LAST:event_caso2ActionPerformed

    private void caso3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caso3ActionPerformed
        if (arreglosGenerados) {

            graficarArchivo("QuickSort(caso3).csv", "mergeSort(caso3).csv", "Sort(caso3).csv", "ParallelSort(caso3).csv", "Caso 3");
            caso3.setSelected(false);
        } else {
            JOptionPane.showMessageDialog(this, "No Se Han Generado Los Arreglos", "Error", JOptionPane.INFORMATION_MESSAGE);
            caso3.setSelected(false);
        }
    }//GEN-LAST:event_caso3ActionPerformed

    public void casoUno(int[] arreglo, int numArreglo) {
        // System.out.println("Arreglo Inicial");
         //mostrarArreglo(arreglo);
        System.out.println("Caso 1 Arreglo Desordenado:");

        System.out.println("Merge Sort:");
        int[] copiaArreglo = generarCopia(arreglo);
       //  System.out.println("Arreglo copia");
        //  mostrarArreglo(copiaArreglo);
        ordenarMergeSort(copiaArreglo, numArreglo, 1);
        System.out.println("Quick Sort:");
        copiaArreglo = generarCopia(arreglo);
       //  System.out.println("Arreglo copia");
        //  mostrarArreglo(copiaArreglo);
        ordenarQuickSort(copiaArreglo, numArreglo, 1);
        System.out.println("Sort:");
        copiaArreglo = generarCopia(arreglo);
       //  System.out.println("Arreglo copia");
       //  mostrarArreglo(copiaArreglo);
        ordenarSort(copiaArreglo, numArreglo, 1);
        System.out.println("ParallelSort:");
        
       //  System.out.println("Arreglo copia");
     //    mostrarArreglo(copiaArreglo);
        ordenarParallelSort(arreglo, numArreglo, 1);

    }

    public void casoDos(int[] arreglo, int numArreglo) {
        System.out.println("Caso 2 Arreglo Ya Ordenado:");
        System.out.println("Merge Sort:");
        // mostrarArreglo(arreglo);
        ordenarMergeSort(arreglo, numArreglo, 2);
        System.out.println("Quick Sort:");
        // mostrarArreglo(arreglo);
        ordenarQuickSort(arreglo, numArreglo, 2);
        System.out.println("Sort:");
        // mostrarArreglo(arreglo);
        ordenarSort(arreglo, numArreglo, 2);
        System.out.println("ParallelSort:");
        // mostrarArreglo(arreglo);
        ordenarParallelSort(arreglo, numArreglo, 2);
    }

    public void casoTres(int[] arreglo, int numArreglo) {
        System.out.println("Caso 3 Orden Decedente:");

        System.out.println("Merge Sort:");
        int[] copiaArreglo = generarCopia(arreglo);
        // mostrarArreglo(copiaArreglo);
        ordenarMergeSort(copiaArreglo, numArreglo, 3);
        System.out.println("Quick Sort:");
        copiaArreglo = generarCopia(arreglo);
        //  mostrarArreglo(copiaArreglo);
        ordenarQuickSort(copiaArreglo, numArreglo, 3);
        System.out.println("Sort:");
        copiaArreglo = generarCopia(arreglo);
        //  mostrarArreglo(copiaArreglo);
        ordenarSort(copiaArreglo, numArreglo, 3);
        System.out.println("ParallelSort:");
        copiaArreglo = generarCopia(arreglo);
        //  mostrarArreglo(copiaArreglo);
        ordenarParallelSort(arreglo, numArreglo, 3);
        //  mostrarArreglo(arreglo);
    }

    public void ordenarMayorMenor(int[] arreglo) {
        int n = arreglo.length;

        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arreglo[j] < arreglo[j + 1]) {

                    int temp = arreglo[j];
                    arreglo[j] = arreglo[j + 1];
                    arreglo[j + 1] = temp;
                }
            }
        }
        //mostrarArreglo(arreglo);
    }

    public void ordenarMergeSort(int[] arreglo, int numArreglo, int caso) {

        int dimension = arreglo.length;

        long starTime = System.nanoTime();

        mergeSort(arreglo);

        long endTime = System.nanoTime();

        long tiempoEjecucion = endTime - starTime;

        System.out.println("Tiempo de Ejecucion es:" + tiempoEjecucion + " nanosegundos");

        escribirCSV("mergeSort(caso" + caso + ").csv", numArreglo, dimension, tiempoEjecucion);

    }

    public void ordenarQuickSort(int[] arreglo, int numArreglo, int caso) {

        int dimension = arreglo.length;

        int n = arreglo.length;

        long starTime = System.nanoTime();

        quickSort(arreglo, 0, n - 1);

        long endTime = System.nanoTime();

        long tiempoEjecucion = endTime - starTime;

        System.out.println("Tiempo de Ejecucion es:" + tiempoEjecucion + " nanosegundos");

        escribirCSV("QuickSort(caso" + caso + ").csv", numArreglo, dimension, tiempoEjecucion);
    }

    public void ordenarSort(int[] arreglo, int numArreglo, int caso) {

        int dimension = arreglo.length;

        long starTime = System.nanoTime();

        Arrays.sort(arreglo);

        long endTime = System.nanoTime();

        long tiempoEjecucion = endTime - starTime;

        System.out.println("Tiempo de Ejecucion es:" + tiempoEjecucion + " nanosegundos");

        escribirCSV("Sort(caso" + caso + ").csv", numArreglo, dimension, tiempoEjecucion);
    }

    public void ordenarParallelSort(int[] arreglo, int numArreglo, int caso) {

        int dimension = arreglo.length;

        long starTime = System.nanoTime();

        Arrays.parallelSort(arreglo);

        long endTime = System.nanoTime();

        long tiempoEjecucion = endTime - starTime;

        System.out.println("Tiempo de Ejecucion es:" + tiempoEjecucion + " nanosegundos");

        escribirCSV("ParallelSort(caso" + caso + ").csv", numArreglo, dimension, tiempoEjecucion);
    }

    public void mostrarArreglo(int[] arreglo) {

        for (int i = 0; i < arreglo.length; i++) {
            System.out.println("" + arreglo[i]);
        }

    }

    public void rellenarAleatorio(int[] arreglo) {
        Random numeroAleatorio = new Random();
        for (int i = 0; i < arreglo.length; i++) {
            arreglo[i] = numeroAleatorio.nextInt();
        }
    }

    public int[] generarCopia(int[] arreglo) {

        int arregloCopia[] = new int[arreglo.length];

        System.arraycopy(arreglo, 0, arregloCopia, 0, arreglo.length);

        return arregloCopia;
    }

    static void quickSort(int A[], int izq, int der) {
        int pivote = A[izq]; 
        int i = izq;         
        int j = der;         
        int aux;

        while (i < j) {                                                           
            while (A[i] <= pivote && i < j) {
                i++;
            }
            while (A[j] > pivote) {
                j--;         
            }
            if (i < j) {                                            
                aux = A[i];                     
                A[i] = A[j];
                A[j] = aux;
            }
        }

        A[izq] = A[j];                                       
        A[j] = pivote;      

        if (izq < j - 1) {
            quickSort(A, izq, j - 1);          
        }
        if (j + 1 < der) {
            quickSort(A, j + 1, der);
        }

    }

    static void mergeSort(int[] Arreglo) {
        int longitudArreglo = Arreglo.length;

        if (longitudArreglo < 2) {
            return;
        }

        int mitadArreglo = longitudArreglo / 2;
        int[] mitadIzquierda = new int[mitadArreglo];
        int[] mitadDerecha = new int[longitudArreglo - mitadArreglo];

        for (int i = 0; i < mitadArreglo; i++) {
            mitadIzquierda[i] = Arreglo[i];
        }
        for (int i = mitadArreglo; i < longitudArreglo; i++) {
            mitadDerecha[i - mitadArreglo] = Arreglo[i];
        }

        mergeSort(mitadIzquierda);
        mergeSort(mitadDerecha);

        merge(Arreglo, mitadIzquierda, mitadDerecha);
    }

    static void merge(int[] Arreglo, int[] mitadIzquierda, int[] mitadDerecha) {

        int mitadIzquierda_tamano = mitadIzquierda.length;
        int mitadDerecha_tamano = mitadDerecha.length;

        int indiceIzquierdo = 0, indiceDerecho = 0, indiceFinal = 0;

        while (indiceIzquierdo < mitadIzquierda_tamano && indiceDerecho < mitadDerecha_tamano) {
            if (mitadIzquierda[indiceIzquierdo] <= mitadDerecha[indiceDerecho]) {
                Arreglo[indiceFinal] = mitadIzquierda[indiceIzquierdo];
                indiceIzquierdo++;
            } else {
                Arreglo[indiceFinal] = mitadDerecha[indiceDerecho];
                indiceDerecho++;
            }
            indiceFinal++;
        }

        while (indiceIzquierdo < mitadIzquierda_tamano) {
            Arreglo[indiceFinal] = mitadIzquierda[indiceIzquierdo];
            indiceIzquierdo++;
            indiceFinal++;
        }

        while (indiceDerecho < mitadDerecha_tamano) {
            Arreglo[indiceFinal] = mitadDerecha[indiceDerecho];
            indiceDerecho++;
            indiceFinal++;
        }

    }

    private void resetCSV() {
        borrarContenidoCSV("mergeSort(caso1).csv");
        borrarContenidoCSV("mergeSort(caso2).csv");
        borrarContenidoCSV("mergeSort(caso3).csv");
        borrarContenidoCSV("Sort(caso1).csv");
        borrarContenidoCSV("Sort(caso2).csv");
        borrarContenidoCSV("Sort(caso3).csv");
        borrarContenidoCSV("QuickSort(caso1).csv");
        borrarContenidoCSV("QuickSort(caso2).csv");
        borrarContenidoCSV("QuickSort(caso3).csv");
        borrarContenidoCSV("ParallelSort(caso1).csv");
        borrarContenidoCSV("ParallelSort(caso2).csv");
        borrarContenidoCSV("ParallelSort(caso3).csv");
    }

    private void borrarContenidoCSV(String nombreArchivo) {

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivo, false))) {

        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }

    }

    private void escribirCSV(String nombreArchivo, int noCorrida, int dimensionArreglo, long tiempo) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivo, true))) {
            File file = new File(nombreArchivo);
            if (file.length() == 0) {
                writer.write("noCorrida,dimensionArreglo,tiempo");
                writer.newLine();
            }
            String linea = noCorrida + "," + dimensionArreglo + "," + tiempo;
            writer.write(linea);
            writer.newLine();
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Error al escribir en el archivo: " + e.getMessage());
        }

    }

    public static void graficarArchivo(String nombreArchivo1, String nombreArchivo2, String nombreArchivo3, String nombreArchivo4, String caso) {
        try {
            XYSeriesCollection dataset = new XYSeriesCollection();
            String[] archivos = {nombreArchivo1, nombreArchivo2, nombreArchivo3, nombreArchivo4};
            String[] algoritmos = {"Quicksort", "Mergesort", "Sort", "SortParallel"};
            Paint[] colores = {Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW};

            for (int i = 0; i < archivos.length; i++) {
                CSVReader reader = new CSVReader(new FileReader(archivos[i]));
                List<String[]> data = reader.readAll();

                XYSeries series = new XYSeries(algoritmos[i]);

                for (String[] row : data.subList(1, data.size())) {
                    int dimensionArreglo = Integer.parseInt(row[1]);
                    long tiempo = Long.parseLong(row[2]);
                    series.add(dimensionArreglo, tiempo);
                }

                dataset.addSeries(series);
            }

            JFreeChart chart = ChartFactory.createXYLineChart(
                    "Tiempo vs Dimension de Arreglo " + caso,
                    "Dimension de Arreglo",
                    "Tiempo (NanoSegundos)",
                    dataset
            );

            for (int i = 0; i < algoritmos.length; i++) {
                chart.getXYPlot().getRenderer().setSeriesPaint(i, colores[i]);
            }

            SwingUtilities.invokeLater(() -> {
                JFrame frame = new JFrame("Gráfico");
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.getContentPane().add(new ChartPanel(chart), BorderLayout.CENTER);
                frame.setSize(800, 600);
                frame.setLocationRelativeTo(null);

                frame.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosed(WindowEvent e) {

                    }
                });

                frame.setVisible(true);
            });

        } catch (IOException | CsvException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Background;
    private javax.swing.JToggleButton OrdenarBoton;
    private javax.swing.JLabel Titulo;
    private javax.swing.JCheckBox caso1;
    private javax.swing.JCheckBox caso2;
    private javax.swing.JCheckBox caso3;
    private javax.swing.JToggleButton generarBoton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}
